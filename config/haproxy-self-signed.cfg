# Generisanje PEM fajla za HAProxy
# sudo openssl genrsa -out ./siuvs.key 4096
# sudo openssl req -new -key ./siuvs.key -out siuvs.csr
# sudo openssl x509 -req -days 365 -in ./siuvs.csr -signkey ./siuvs.key -out ./siuvs.crt
# sudo cat ./siuvs.crt ./siuvs.key | sudo tee ./siuvs.pem

global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL). This list is from:
	#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	# An alternative list with additional directives can be obtained from
	#  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
	ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
	ssl-default-bind-options no-sslv3

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http


# Boskova podesavanja - pocetak
	# Dodaje X-Forwarded-For header jer application server inace vidi IP HAProxy-ja
	option forwardfor
	# This provides the lowest latency on the client side (slow network) and the fastest session reuse on the server side to save server resources
	option http-server-close

frontend www-http
	bind *:80
	# The X-Forwarded-Proto (XFP) header is a de-facto standard header for identifying the protocol (HTTP or HTTPS) that a client used to connect to your proxy or load balancer. Your server access logs contain the protocol used between the server and the load balancer, but not the protocol used between the client and the load balancer. To determine the protocol used between the client and the load balancer, the X-Forwarded-Proto request header can be used.
	reqadd X-Forwarded-Proto:\ http
	# ssl_fc : boolean Returns true when the front connection was made via an SSL/TLS transport layer and is locally deciphered. This means it has matched a socket declared with a "bind" line having the "ssl" option.
	redirect scheme https code 301 if !{ ssl_fc }

frontend www-https
	bind *:443 ssl crt /data/git/siuvs/config/siuvs.pem
	reqadd X-Forwarded-Proto:\ https
	default_backend https-backend

backend https-backend
	server www-1 127.0.0.1:8080 check
	
# Boskova podesavanja - kraj
